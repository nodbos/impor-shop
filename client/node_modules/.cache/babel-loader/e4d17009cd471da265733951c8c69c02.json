{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchPostsSuccess, fetchProductsSuccess, fetchProductsFailure } from './shop.actions';\nimport ShopActionTypes from './shop.types';\nexport function* fetchProductAsync(action) {\n  try {\n    const productRef = firestore.collection(action.payload);\n    const snapshot = yield productRef.get();\n    const productsMap = yield call(convertCollectionsSnapshotToMap, snapshot, action.payload);\n\n    if (action.payload === 'products') {\n      yield put(fetchProductsSuccess(productsMap));\n    } else if (action.payload === 'posts') {\n      yield put(fetchPostsSuccess(productsMap));\n    }\n  } catch (error) {\n    yield put(fetchProductsFailure(error.message));\n  }\n}\nexport function* onFetchProductsStart() {\n  yield takeLatest(ShopActionTypes.FETCH_PRODUCTS_START, fetchProductAsync);\n}\nexport function* shopSagas() {\n  yield all([call(onFetchProductsStart)]);\n}","map":{"version":3,"sources":["D:/0 - Web Projects/06 - Complete React Developer in 2020/7-impormotriz-shop_v3/client/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","all","firestore","convertCollectionsSnapshotToMap","fetchPostsSuccess","fetchProductsSuccess","fetchProductsFailure","ShopActionTypes","fetchProductAsync","action","productRef","collection","payload","snapshot","get","productsMap","error","message","onFetchProductsStart","FETCH_PRODUCTS_START","shopSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SACIC,SADJ,EAEIC,+BAFJ,QAGO,+BAHP;AAKA,SACIC,iBADJ,EAEIC,oBAFJ,EAGIC,oBAHJ,QAIO,gBAJP;AAMA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,iBAAV,CAA4BC,MAA5B,EAAoC;AACvC,MAAI;AACA,UAAMC,UAAU,GAAGR,SAAS,CAACS,UAAV,CAAqBF,MAAM,CAACG,OAA5B,CAAnB;AACA,UAAMC,QAAQ,GAAG,MAAMH,UAAU,CAACI,GAAX,EAAvB;AAEA,UAAMC,WAAW,GAAG,MAAMhB,IAAI,CAC1BI,+BAD0B,EAE1BU,QAF0B,EAG1BJ,MAAM,CAACG,OAHmB,CAA9B;;AAMA,QAAIH,MAAM,CAACG,OAAP,KAAmB,UAAvB,EAAmC;AAC/B,YAAMZ,GAAG,CAACK,oBAAoB,CAACU,WAAD,CAArB,CAAT;AACH,KAFD,MAEO,IAAIN,MAAM,CAACG,OAAP,KAAmB,OAAvB,EAAgC;AACnC,YAAMZ,GAAG,CAACI,iBAAiB,CAACW,WAAD,CAAlB,CAAT;AACH;AACJ,GAfD,CAeE,OAAOC,KAAP,EAAc;AACZ,UAAMhB,GAAG,CAACM,oBAAoB,CAACU,KAAK,CAACC,OAAP,CAArB,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,oBAAV,GAAiC;AACpC,QAAMpB,UAAU,CACZS,eAAe,CAACY,oBADJ,EAEZX,iBAFY,CAAhB;AAIH;AAED,OAAO,UAAUY,SAAV,GAAsB;AACzB,QAAMnB,GAAG,CAAC,CAACF,IAAI,CAACmB,oBAAD,CAAL,CAAD,CAAT;AACH","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\r\nimport {\r\n    firestore,\r\n    convertCollectionsSnapshotToMap,\r\n} from '../../firebase/firebase.utils';\r\n\r\nimport {\r\n    fetchPostsSuccess,\r\n    fetchProductsSuccess,\r\n    fetchProductsFailure,\r\n} from './shop.actions';\r\n\r\nimport ShopActionTypes from './shop.types';\r\n\r\nexport function* fetchProductAsync(action) {\r\n    try {\r\n        const productRef = firestore.collection(action.payload);\r\n        const snapshot = yield productRef.get();\r\n\r\n        const productsMap = yield call(\r\n            convertCollectionsSnapshotToMap,\r\n            snapshot,\r\n            action.payload\r\n        );\r\n\r\n        if (action.payload === 'products') {\r\n            yield put(fetchProductsSuccess(productsMap));\r\n        } else if (action.payload === 'posts') {\r\n            yield put(fetchPostsSuccess(productsMap));\r\n        }\r\n    } catch (error) {\r\n        yield put(fetchProductsFailure(error.message));\r\n    }\r\n}\r\n\r\nexport function* onFetchProductsStart() {\r\n    yield takeLatest(\r\n        ShopActionTypes.FETCH_PRODUCTS_START,\r\n        fetchProductAsync\r\n    );\r\n}\r\n\r\nexport function* shopSagas() {\r\n    yield all([call(onFetchProductsStart)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}